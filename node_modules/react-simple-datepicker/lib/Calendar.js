'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Day = require('./Day');

var _Day2 = _interopRequireDefault(_Day);

var _utils = require('./utils/');

var Calendar = (function (_Component) {
  _inherits(Calendar, _Component);

  function Calendar(props) {
    _classCallCheck(this, Calendar);

    _get(Object.getPrototypeOf(Calendar.prototype), 'constructor', this).call(this, props);

    this.state = {
      displayedMonth: props.date.clone().startOf('month')
    };
  }

  _createClass(Calendar, [{
    key: 'renderWeeks',
    value: function renderWeeks() {
      var _this = this;

      var _daysOfMonth = (0, _utils.daysOfMonth)(this.state.displayedMonth);
      var _weekEnum = (0, _utils.weekEnum)(_daysOfMonth);

      return _weekEnum.map(function (week, key) {
        return _react2['default'].createElement(
          'tr',
          { key: key },
          _this.renderDay(_daysOfMonth, week)
        );
      });
    }
  }, {
    key: 'renderDay',
    value: function renderDay(daysOfMonth, week) {
      var _this2 = this;

      var days = [0, 1, 2, 3, 4, 5, 6];
      var _props = this.props;
      var minDate = _props.minDate;
      var maxDate = _props.maxDate;

      return days.map(function (day, key) {
        var date = daysOfMonth[week * 7 + day];
        var disabled = undefined;

        if (minDate && maxDate) {
          disabled = date.isBefore(minDate, 'day') || date.isAfter(maxDate, 'day');
        } else if (minDate) {
          disabled = date.isBefore(minDate, 'day');
        } else if (maxDate) {
          disabled = date.isAfter(maxDate, 'day');
        }

        var dayNextMonth = (0, _utils.isDateFromNextMonth)(date, _this2.state.displayedMonth);
        var dayPrevMonth = (0, _utils.isDateFromPrevMonth)(date, _this2.state.displayedMonth);

        return _react2['default'].createElement(_Day2['default'], { key: key,
          day: date,
          selectDay: _this2.selectDay.bind(_this2, date),
          disabled: disabled,
          dayPrevMonth: dayPrevMonth,
          dayNextMonth: dayNextMonth,
          active: _this2.props.date });
      });
    }
  }, {
    key: 'moveDisplayedMonth',
    value: function moveDisplayedMonth(delta) {
      var dm = this.state.displayedMonth;
      this.setState({
        displayedMonth: dm.clone().add(delta, 'months')
      });
    }
  }, {
    key: 'selectDay',
    value: function selectDay(date) {
      this.props.selectDay(date);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(
        'table',
        { className: 'calendar' },
        _react2['default'].createElement(
          'thead',
          null,
          _react2['default'].createElement(
            'tr',
            { className: 'displayedMonth' },
            _react2['default'].createElement('td', { className: 'nav prev',
              onClick: this.moveDisplayedMonth.bind(this, -1) }),
            _react2['default'].createElement(
              'td',
              { className: 'monthName', colSpan: '5' },
              this.state.displayedMonth.format('MMMM YYYY')
            ),
            _react2['default'].createElement('td', { className: 'nav next',
              onClick: this.moveDisplayedMonth.bind(this, 1) })
          )
        ),
        _react2['default'].createElement(
          'tbody',
          null,
          this.renderWeeks()
        )
      );
    }
  }]);

  return Calendar;
})(_react.Component);

exports['default'] = Calendar;
module.exports = exports['default'];